"use strict";(self.webpackChunkngeo=self.webpackChunkngeo||[]).push([[354],{"./src/lidar/PanelElement.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Empty:()=>Empty,WithLine:()=>WithLine,default:()=>PanelElement_stories});var lit=__webpack_require__("./node_modules/lit/index.js"),decorators=__webpack_require__("./node_modules/lit/decorators.js"),i18next=__webpack_require__("./node_modules/i18next/dist/esm/i18next.js"),config=(__webpack_require__("./node_modules/bootstrap/js/src/tooltip.js"),__webpack_require__("./srcapi/store/config.ts"));const Config=new class LidarprofileConfigService{constructor(){config.Ay.getConfig().subscribe({next:configuration=>{configuration&&(this.pytreeLidarprofileJsonUrl=configuration.pytreeLidarprofileJsonUrl)}}),this.loaded=!1,this.clientConfig={autoWidth:!0,margin:{left:40,top:10,right:200,bottom:40},pointAttributes:{},pointSum:0,tolerance:5},this.serverConfig=null}initProfileConfig(){const url=`${this.pytreeLidarprofileJsonUrl}/profile/config`;return fetch(url).then(resp=>resp.json().then(data=>{this.serverConfig={classification_colors:data.classification_colors||null,debug:!!data.debug,default_attribute:data.default_attribute||"",default_color:data.default_color||"",default_point_attribute:data.default_point_attribute||"",default_point_cloud:data.default_point_cloud||"",initialLOD:data.initialLOD||0,max_levels:data.max_levels||null,max_point_number:data.max_point_number||5e4,minLOD:data.minLOD||0,point_attributes:data.point_attributes||null,point_size:data.point_size||0,width:data.width||0};const attr=[];for(const key in this.serverConfig.point_attributes)1==this.serverConfig.point_attributes[key].visible&&attr.push(this.serverConfig.point_attributes[key]);const selectedMat=this.serverConfig.point_attributes[this.serverConfig.default_point_attribute];this.clientConfig.pointAttributes={availableOptions:attr,selectedOption:selectedMat}}))}};var src=__webpack_require__("./node_modules/d3/src/index.js");const Measure=class{constructor(gmfLidarprofileManagerInstance){this.manager_=gmfLidarprofileManagerInstance,this.pStart_={},this.pEnd_={}}clearMeasure(){this.pStart_={},this.pEnd_={};const shadowRoot=document.querySelector("#lidar-footer").shadowRoot;if(null===shadowRoot)return;const selector=shadowRoot.querySelector("#gmf-lidarprofile-container svg.lidar-svg"),svg=(0,src.Ltv)(selector);svg.selectAll("#text_m").remove(),svg.selectAll("#start_m").remove(),svg.selectAll("#end_m").remove(),svg.selectAll("#line_m").remove(),svg.on("click",null),svg.style("cursor","default")}setMeasureActive(){const svg=(0,src.Ltv)(document.querySelector("#lidar-footer").shadowRoot.querySelector("#gmf-lidarprofile-container svg.lidar-svg"));svg.style("cursor","pointer"),svg.on("click",event=>this.measureHeight(event))}measureHeight(event){if(!this.manager_.config)throw new Error("Missing manager.config");if(!this.manager_.plot)throw new Error("Missing manager.plot");const svg=(0,src.Ltv)(document.querySelector("#lidar-footer").shadowRoot.querySelector("#gmf-lidarprofile-container svg.lidar-svg")),svgEl=svg.node(),canvasEl=(0,src.Ltv)(document.querySelector("#lidar-footer").shadowRoot.querySelector("#gmf-lidarprofile-container .lidar-canvas")).node(),svgCoordinates=(0,src.WnM)(event,svgEl),canvasCoordinates=(0,src.WnM)(event,canvasEl),margin=this.manager_.config.clientConfig.margin,xs=svgCoordinates[0],ys=svgCoordinates[1],sx=this.manager_.plot.updateScaleX,sy=this.manager_.plot.updateScaleY;if(!this.manager_.config.serverConfig)throw new Error("Missing manager_.config.serverConfig");const p=this.manager_.utils.getClosestPoint(this.manager_.profilePoints,canvasCoordinates[0],canvasCoordinates[1],2,this.manager_.plot.updateScaleX,this.manager_.plot.updateScaleY,this.manager_.config.serverConfig.classification_colors);if(this.pStart_.set?this.pEnd_.set||(null!==p?(this.pEnd_.distance=p.distance,this.pEnd_.altitude=p.altitude,this.pEnd_.cx=sx(p.distance)+margin.left,this.pEnd_.cy=sy(p.altitude)+margin.top):(this.pEnd_.distance=sx.invert(xs),this.pEnd_.altitude=sy.invert(ys),this.pEnd_.cx=xs,this.pEnd_.cy=ys),this.pEnd_.set=!0,svg.append("circle").attr("id","end_m").attr("cx",this.pEnd_.cx).attr("cy",this.pEnd_.cy).attr("r",3).style("fill","red"),svg.append("line").attr("id","line_m").attr("x1",this.pStart_.cx).attr("y1",this.pStart_.cy).attr("x2",this.pEnd_.cx).attr("y2",this.pEnd_.cy).attr("stroke-width",2).attr("stroke","red")):(null!==p?(this.pStart_.distance=p.distance,this.pStart_.altitude=p.altitude,this.pStart_.cx=sx(p.distance)+margin.left,this.pStart_.cy=sy(p.altitude)+margin.top):(this.pStart_.distance=sx.invert(xs),this.pStart_.altitude=sy.invert(ys),this.pStart_.cx=xs,this.pStart_.cy=ys),this.pStart_.set=!0,svg.append("circle").attr("id","start_m").attr("cx",this.pStart_.cx).attr("cy",this.pStart_.cy).attr("r",3).style("fill","red")),this.pStart_.set&&this.pEnd_.set){const dH=this.pEnd_.altitude-this.pStart_.altitude,dD=this.pEnd_.distance-this.pStart_.distance,height=Math.round(10*Math.sqrt(Math.pow(dH,2)+Math.pow(dD,2)))/10;isNaN(height)||svg.append("text").attr("id","text_m").attr("x",10+(this.pStart_.cx+this.pEnd_.cx)/2).attr("y",(this.pStart_.cy+this.pEnd_.cy)/2).text(`${height} m`).attr("font-family","sans-serif").attr("font-size","14px").style("font-weight","bold").attr("fill","red"),this.pEnd_.set=!1,this.pStart_.set=!1}}};var Feature=__webpack_require__("./node_modules/ol/Feature.js"),Point=__webpack_require__("./node_modules/ol/geom/Point.js"),Circle=__webpack_require__("./node_modules/ol/style/Circle.js"),Fill=__webpack_require__("./node_modules/ol/style/Fill.js"),Style=__webpack_require__("./node_modules/ol/style/Style.js");const Plot=class{constructor(gmfLidarprofileManagerInstance){this.manager_=gmfLidarprofileManagerInstance,this.scaleX=null,this.updateScaleX=x=>x,this.scaleY=null,this.updateScaleY=y=>y,this.material=null,this.width_=0,this.height_=0,this.previousDomainX=[],this.moved_=!1}drawPoints(points){if(!this.manager_.config)throw new Error("Missing manager.config");if(!this.manager_.config.serverConfig)throw new Error("Missing manager_.config.serverConfig");let i=-1;const nPoints=points.distance.length;let cx,cy;const ctx=(0,src.Ltv)(document.querySelector("#lidar-footer").shadowRoot.querySelector("#gmf-lidarprofile-container .lidar-canvas")).node().getContext("2d");if(null===ctx)throw new Error("Missing ctx");const profileServerConfig=this.manager_.config.serverConfig;for(;++i<nPoints;){const distance=points.distance[i],altitude=points.altitude[i],rgb=points.color_packed[i],intensity=points.intensity[i],classification=points.classification[i];profileServerConfig.classification_colors[classification]&&profileServerConfig.classification_colors[classification].visible&&(cx=this.updateScaleX(distance),cy=this.updateScaleY(altitude),ctx.beginPath(),ctx.moveTo(cx,cy),"COLOR_PACKED"==this.material?ctx.fillStyle=`RGB(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`:"INTENSITY"==this.material?ctx.fillStyle=`RGB(${intensity}, ${intensity}, ${intensity})`:"CLASSIFICATION"==this.material?ctx.fillStyle=`RGB(${profileServerConfig.classification_colors[classification].color})`:ctx.fillStyle=profileServerConfig.default_color,ctx.arc(cx,cy,profileServerConfig.point_size,0,2*Math.PI,!1),ctx.fill())}}setupPlot(rangeX,rangeY){if(!this.manager_.config)throw new Error("Missing manager.config");if(!this.manager_.config.serverConfig)throw new Error("Missing manager_.config.serverConfig");const canvas=(0,src.Ltv)(document.querySelector("#lidar-footer").shadowRoot.querySelector("#gmf-lidarprofile-container .lidar-canvas")),canvasEl=canvas.node(),ctx=canvasEl.getContext("2d");if(null===ctx)throw new Error("Missing ctx");ctx.clearRect(0,0,canvasEl.getBoundingClientRect().width,canvasEl.getBoundingClientRect().height);const margin=this.manager_.config.clientConfig.margin,containerEl=(0,src.Ltv)(document.querySelector("#lidar-footer").shadowRoot.querySelector("#gmf-lidarprofile-container")).node(),containerWidth=containerEl.getBoundingClientRect().width,containerHeight=containerEl.getBoundingClientRect().height;this.width_=containerWidth-(margin.left+margin.right),this.height_=containerHeight-(margin.top+margin.bottom),this.material=this.manager_.config.serverConfig.default_attribute,canvas.attr("height",this.height_).attr("width",this.width_).style("background-color","black").style("z-index",0).style("position","absolute").style("margin-left",`${margin.left.toString()}px`).style("margin-top",`${margin.top.toString()}px`);const domainProfileWidth=rangeX[1]-rangeX[0],domainProfileHeight=rangeY[1]-rangeY[0],domainRatio=domainProfileWidth/domainProfileHeight,rangeRatio=this.width_/this.height_;let domainScale;if(domainRatio<rangeRatio){const domainScaledWidth=domainProfileWidth*(rangeRatio/domainRatio);this.scaleX=(0,src.m4Y)(),this.scaleX.domain([0,domainScaledWidth]),this.scaleX.range([0,this.width_]),this.scaleY=(0,src.m4Y)(),this.scaleY.domain(rangeY),this.scaleY.range([this.height_,0])}else{domainScale=domainRatio/rangeRatio;const domainScaledHeight=domainProfileHeight*domainScale,domainHeightCentroid=(rangeY[1]+rangeY[0])/2;this.scaleX=(0,src.m4Y)(),this.scaleX.domain(rangeX),this.scaleX.range([0,this.width_]),this.scaleY=(0,src.m4Y)(),this.scaleY.domain([domainHeightCentroid-domainScaledHeight/2,domainHeightCentroid+domainScaledHeight/2]),this.scaleY.range([this.height_,0])}const zoom=(0,src.s_O)().scaleExtent([-10,100]).translateExtent([[0,0],[this.width_,this.height_]]).extent([[0,0],[this.width_,this.height_]]).on("zoom",event=>this.zoomed(event));zoom.on("end",event=>this.zoomEnd(event)),this.previousDomainX=this.scaleX.domain(),this.updateScaleX=this.scaleX,this.updateScaleY=this.scaleY;const svg=(0,src.Ltv)(document.querySelector("#lidar-footer").shadowRoot.querySelector("#gmf-lidarprofile-container svg.lidar-svg"));svg.call(zoom).on("dblclick.zoom",null),svg.selectAll("*").remove(),svg.attr("width",this.width_+margin.left).attr("height",this.height_+margin.top+margin.bottom),svg.on("mousemove",event=>{this.pointHighlight(event)});const xAxis=(0,src.l78)(this.scaleX),yAxis=(0,src.V4s)(this.scaleY).tickSize(-this.width_);svg.select(".y.axis").selectAll("g.tick line").style("stroke","#b7cff7"),svg.append("g").attr("class","y axis").call(yAxis),svg.append("g").attr("class","x axis").call(xAxis),svg.select(".y.axis").attr("transform",`translate(${margin.left}, ${margin.top})`),svg.select(".x.axis").attr("transform",`translate(${margin.left}, ${this.height_+margin.top})`),svg.select(".y.axis").selectAll("g.tick line").style("opacity","0.5").style("stroke","#b7cff7")}zoomEnd(event){if(event.sourceEvent&&!1===this.moved_)return void this.manager_.updateData();this.moved_=!1;const ctx=(0,src.Ltv)(document.querySelector("#lidar-footer").shadowRoot.querySelector("#gmf-lidarprofile-container .lidar-canvas")).node().getContext("2d");if(null===ctx)throw new Error("Missing ctx");ctx.clearRect(0,0,this.width_,this.height_),this.manager_.updateData()}zoomed(event){if(!this.manager_.measure)throw new Error("Missing manager.measure");if(!this.scaleX)throw new Error("Missing scaleX");if(!this.scaleY)throw new Error("Missing scaleY");if(event.sourceEvent&&"mousemove"===event.sourceEvent.type&&(this.moved_=!0,0==event.sourceEvent.movementX&&0==event.sourceEvent.movementY))return;this.manager_.measure.clearMeasure();const tr=event.transform,svg=(0,src.Ltv)(document.querySelector("#lidar-footer").shadowRoot.querySelector("#gmf-lidarprofile-container svg.lidar-svg")),xAxis=(0,src.l78)(this.scaleX),yAxis=(0,src.V4s)(this.scaleY).tickSize(-this.width_),newScaleX=tr.rescaleX(this.scaleX),newScaleY=tr.rescaleY(this.scaleY);svg.select(".x.axis").call(xAxis.scale(newScaleX)),svg.select(".y.axis").call(yAxis.scale(newScaleY));const ctx=(0,src.Ltv)(document.querySelector("#lidar-footer").shadowRoot.querySelector("#gmf-lidarprofile-container .lidar-canvas")).node().getContext("2d");if(null===ctx)throw new Error("Missing ctx");ctx.clearRect(0,0,this.width_,this.height_),svg.select(".y.axis").selectAll("g.tick line").style("opacity","0.5").style("stroke","#b7cff7"),this.updateScaleX=newScaleX,this.updateScaleY=newScaleY}pointHighlight(event){if(!this.manager_.config)throw new Error("Missing manager.config");if(!this.manager_.config.serverConfig)throw new Error("Missing manager_.config.serverConfig");const lidarContainerElement=document.querySelector("#lidar-footer").shadowRoot.querySelector("#gmf-lidarprofile-container "),svg=(0,src.Ltv)(lidarContainerElement.querySelector("svg.lidar-svg")),lidarInfo=(0,src.Ltv)(lidarContainerElement.querySelector(".lidar-info")),pointSize=this.manager_.config.serverConfig.point_size,margin=this.manager_.config.clientConfig.margin,tolerance=this.manager_.config.clientConfig.tolerance||0,canvasEl=(0,src.Ltv)(lidarContainerElement.querySelector(".lidar-canvas")).node(),canvasCoordinates=(0,src.WnM)(event,canvasEl),classification_colors=this.manager_.config.serverConfig.classification_colors;let cx,cy;const p=this.manager_.utils.getClosestPoint(this.manager_.profilePoints,canvasCoordinates[0],canvasCoordinates[1],tolerance,this.updateScaleX,this.updateScaleY,classification_colors),source=this.manager_.lidarPointHighlight.getSource();if(null!=p){cx=this.updateScaleX(p.distance)+margin.left,cy=this.updateScaleY(p.altitude)+margin.top,svg.selectAll("#highlightCircle").remove(),svg.append("circle").attr("id","highlightCircle").attr("cx",cx).attr("cy",cy).attr("r",pointSize+1).style("fill","orange");const pointClassification=classification_colors[p.classification||-1]||{},html=this.getInfoHTML(p,pointClassification,1);lidarInfo.html(html),this.manager_.cartoHighlight.setElement(void 0);const el=document.createElement("div");el.className+="tooltip gmf-tooltip-measure",el.innerHTML=html,this.manager_.cartoHighlight.setElement(el),this.manager_.cartoHighlight.setPosition([p.coords[0],p.coords[1]]),source.clear();const lidarPointGeom=new Point.A([p.coords[0],p.coords[1]]),lidarPointFeature=new Feature.A(lidarPointGeom);void 0!==pointClassification.color&&lidarPointFeature.setStyle(new Style.Ay({image:new Circle.A({fill:new Fill.A({color:`rgba(${pointClassification.color}, 1)`}),radius:3})})),source.addFeature(lidarPointFeature)}else source.clear(),svg.select("#highlightCircle").remove(),lidarInfo.html(""),this.manager_.cartoHighlight.setPosition(void 0)}getInfoHTML(point,classification_color,distDecimal){const html=[],distance=point.distance,altitude=point.altitude,classification=i18next.Ay.t(classification_color.name),intensity=point.intensity;if(void 0!==distance){const distanceTxt=i18next.Ay.t("Distance: ");html.push(`${distanceTxt+this.formatDecimals(distance,distDecimal)}`)}if(void 0!==altitude){const altitudeTxt=i18next.Ay.t("Altitude: ");html.push(`${altitudeTxt+this.formatDecimals(altitude,distDecimal)}`)}if(classification.length>0){const classificationTxt=i18next.Ay.t("Classification: ");html.push(`${classificationTxt+classification}`)}if(void 0!==intensity){const intensityTxt=i18next.Ay.t("Intensity: ");html.push(`${intensityTxt+this.formatDecimals(intensity,0)}`)}return html.join("</br>")}formatDecimals(num,decimals){return Number((Math.round(100*num)/100).toFixed(decimals))}changeStyle(material){this.material=material;const canvasEl=(0,src.Ltv)(document.querySelector("#lidar-footer").shadowRoot.querySelector("#gmf-lidarprofile-container .lidar-canvas")).node(),ctx=canvasEl.getContext("2d");if(null===ctx)throw new Error("Missing ctx");ctx.clearRect(0,0,canvasEl.width,canvasEl.height),this.drawPoints(this.manager_.profilePoints)}setClassActive(classification,material){if(!this.manager_.config)throw new Error("Missing manager.config");if(!this.manager_.config.serverConfig)throw new Error("Missing manager_.config.serverConfig");this.manager_.config.serverConfig.classification_colors=classification,this.changeStyle(material)}};var LineString=__webpack_require__("./node_modules/ol/geom/LineString.js"),RegularShape=__webpack_require__("./node_modules/ol/style/RegularShape.js"),Stroke=__webpack_require__("./node_modules/ol/style/Stroke.js"),FileSaver_min=__webpack_require__("./node_modules/file-saver/dist/FileSaver.min.js");const Utils=class{clipLineByMeasure(config,map_resolution,linestring,dLeft,dRight){const clippedLine=new LineString.A([]);let mileage_start=0,mileage_end=0;const totalLength=linestring.getLength(),fractionStart=dLeft/totalLength,fractionEnd=dRight/totalLength;let segNumber=linestring.getCoordinates().length-1,counter=0;linestring.forEachSegment((segStart,segEnd)=>{counter+=1;const segLine=new LineString.A([segStart,segEnd]);mileage_end+=segLine.getLength(),dLeft==mileage_start?clippedLine.appendCoordinate(segStart):dLeft>mileage_start&&dLeft<mileage_end&&clippedLine.appendCoordinate(linestring.getCoordinateAt(fractionStart)),mileage_start>dLeft&&mileage_start<dRight&&clippedLine.appendCoordinate(segStart),dRight==mileage_end?clippedLine.appendCoordinate(segEnd):(dRight>mileage_start&&dRight<mileage_end||dRight>mileage_start&&dRight>mileage_end&&counter===segNumber)&&clippedLine.appendCoordinate(linestring.getCoordinateAt(fractionEnd)),mileage_start+=segLine.getLength()});const feat=new Feature.A({geometry:clippedLine}),lineStyle=new Style.Ay({stroke:new Stroke.A({color:"rgba(255,0,0,1)",width:2,lineCap:"square"})});let firstSegmentAngle=0,lastSegementAngle=0;segNumber=clippedLine.getCoordinates().length-1;let segCounter=1;clippedLine.forEachSegment((start,end)=>{if(1==segCounter){const dx=end[0]-start[0],dy=end[1]-start[1];firstSegmentAngle=Math.atan2(dx,dy)}if(segCounter==segNumber){const dx=end[0]-start[0],dy=end[1]-start[1];lastSegementAngle=Math.atan2(dx,dy)}segCounter+=1});const styles=[lineStyle],lineEnd=clippedLine.getLastCoordinate(),lineStart=clippedLine.getFirstCoordinate();return styles.push(new Style.Ay({geometry:new Point.A(lineStart),image:new RegularShape.A({fill:new Fill.A({color:"rgba(255, 0, 0, 1)"}),stroke:new Stroke.A({color:"rgba(255,0,0,1)",width:1,lineCap:"square"}),points:3,radius:5,rotation:firstSegmentAngle,angle:Math.PI/3})}),new Style.Ay({geometry:new Point.A(lineEnd),image:new RegularShape.A({fill:new Fill.A({color:"rgba(255, 0, 0, 1)"}),stroke:new Stroke.A({color:"rgba(255,0,0,1)",width:1,lineCap:"square"}),points:3,radius:5,rotation:lastSegementAngle,angle:4*Math.PI/3})})),{clippedLine:clippedLine.getCoordinates(),distanceOffset:dLeft,bufferGeom:feat,bufferStyle:styles}}getNiceLOD(span,max_levels){let maxLOD=0,width=0;for(const key in max_levels){const level=parseInt(key,10);span<level&&max_levels[level].max>maxLOD&&(maxLOD=max_levels[level].max,width=max_levels[level].width)}return{maxLOD,width}}downloadProfileAsImageFile(profileClientConfig){const lidarContainerElement=document.querySelector("#lidar-footer").shadowRoot.querySelector("#gmf-lidarprofile-container "),profileSVG=(0,src.Ltv)(lidarContainerElement.querySelector("svg.lidar-svg")),w=parseInt(profileSVG.attr("width"),10),h=parseInt(profileSVG.attr("height"),10),margin=profileClientConfig.margin,canvas=document.createElement("canvas");canvas.style.display="none",canvas.width=w,canvas.height=h;const ctx=canvas.getContext("2d");if(!ctx)throw new Error("Missing ctx");ctx.fillStyle="white",ctx.fillRect(0,0,w,h);const profileCanvasEl=(0,src.Ltv)(lidarContainerElement.querySelector(".lidar-canvas")).node();ctx.drawImage(profileCanvasEl,margin.left,margin.top);const exportImage=new Image,serializer=new XMLSerializer,profileSVGEl=profileSVG.node(),svgStr=serializer.serializeToString(profileSVGEl),img_id="lidare_profile_for_export_uid";exportImage.id=img_id,exportImage.src=`data:image/svg+xml;base64,${btoa(svgStr)}`,exportImage.style.setProperty("display","none");const body=document.getElementsByTagName("body")[0];exportImage.onload=()=>{ctx.drawImage(exportImage,0,0,w,h);const elImg=document.getElementById(img_id);if(!elImg)throw new Error("Missing elImg");body.removeChild(elImg),canvas.toBlob(blob=>{blob||window.alert(i18next.Ay.t("No graph to export in PNG!")),(0,FileSaver_min.saveAs)(blob,"LIDAR_profile.png")})},body.appendChild(exportImage)}getFlatPointsByDistance(profilePoints){const points=[];for(let i=0;i<profilePoints.distance.length;i++){const p={distance:profilePoints.distance[i],altitude:profilePoints.altitude[i],color_packed:profilePoints.color_packed[i],intensity:profilePoints.intensity[i],classification:profilePoints.classification[i],coords:profilePoints.coords[i]};points.push(p)}return points.sort((a,b)=>a.distance-b.distance),points}getCSVData(points){return points.map(point=>{const row={};for(const key in point){const value=point[key];if("altitude"==key){const value=point?.altitude;row[key]=value?value.toFixed(4):NaN}else row[key]="color_packed"==key?(point.color_packed??[]).join(" "):"coords"==key?(point.coords??[]).join(" "):value}return row})}arrayMax(array){return array.reduce((a,b)=>Math.max(a,b))}arrayMin(array){let minVal=1/0;for(const element of array)element<minVal&&(minVal=element);return minVal}getPytreeLinestring(line){const coords=line.getCoordinates();let pytreeLineString="";for(const coord of coords){const px=coord[0],py=coord[1];pytreeLineString+=`{${Math.round(100*px)/100}, ${Math.round(100*py)/100}},`}return pytreeLineString.substr(0,pytreeLineString.length-1)}getClosestPoint(points,xs,ys,tolerance,sx,sy,classification_colors){const d=points,tol=tolerance,distances=[],hP=[];for(let i=0;i<d.distance.length;i++)if(sx(d.distance[i])<xs+tol&&sx(d.distance[i])>xs-tol&&sy(d.altitude[i])<ys+tol&&sy(d.altitude[i])>ys-tol){const pDistance=Math.sqrt(Math.pow(sx(d.distance[i])-xs,2)+Math.pow(sy(d.altitude[i])-ys,2)),cClassif=classification_colors[d.classification[i]];cClassif&&1==cClassif.visible&&(hP.push({distance:d.distance[i],altitude:d.altitude[i],classification:d.classification[i],color_packed:d.color_packed[i],intensity:d.intensity[i],coords:d.coords[i]}),distances.push(pDistance))}let closestPoint=null;if(hP.length>0){const minDist=Math.min(...distances),indexMin=distances.indexOf(minDist);closestPoint=-1!=indexMin?hP[indexMin]:hP[0]}return closestPoint}};var Vector=__webpack_require__("./node_modules/ol/layer/Vector.js"),Overlay=__webpack_require__("./node_modules/ol/Overlay.js"),source_Vector=__webpack_require__("./node_modules/ol/source/Vector.js");const gmfLidarprofileManager=new class LidarprofileManager{constructor(){this.debouncer=function debounce(func,wait){let timeout=null;return function(...args){null!==timeout&&clearTimeout(timeout),timeout=window.setTimeout(()=>{timeout=null,func.apply(this,args)},wait)}}(()=>this.updateData_(),200),this.promise_=null,this.plot=null,this.measure=null,this.config=null,this.map_=null,this.cartoHighlight=new Overlay.A({offset:[0,-15],positioning:"bottom-center"}),this.lidarPointHighlight=new Vector.A({className:"canvas2d",source:new source_Vector.A({}),style:new Style.Ay({image:new Circle.A({fill:new Fill.A({color:"rgba(0, 0, 255, 1)"}),radius:3})})}),this.lidarBuffer=new Vector.A({className:"canvas2d",source:new source_Vector.A({})}),this.profilePoints=this.getEmptyProfilePoints_(),this.isPlotSetup_=!1,this.line_=null,this.utils=new Utils}init(config,map){this.config=config,this.plot=new Plot(this),this.measure=new Measure(this),this.setMap(map)}clearBuffer(){this.lidarBuffer&&this.lidarBuffer.getSource().clear()}setLine(line){this.line_=line}setMap(map){this.map_=map,this.cartoHighlight.setMap(map),this.lidarPointHighlight.setMap(map),this.lidarBuffer.setMap(map)}getEmptyProfilePoints_(){return{distance:[],altitude:[],color_packed:[],intensity:[],classification:[],coords:[]}}getProfileByLOD(clippedLine,distanceOffset,resetPlot,minLOD){if(!this.config)throw new Error("Missing config");if(!this.plot)throw new Error("Missing plot");if(!this.line_)throw new Error("Missing line");if(!this.config.serverConfig)throw new Error("Missing config.serverConfig");this.profilePoints=this.getEmptyProfilePoints_(),resetPlot&&(this.isPlotSetup_=!1);const lidarContainerElement=document.querySelector("#lidar-footer").shadowRoot.querySelector("#gmf-lidarprofile-container");(0,src.Ltv)(lidarContainerElement.querySelector(".lidar-error")).style("visibility","hidden");let maxLODWith,pytreeLinestring=this.utils.getPytreeLinestring(this.line_);const max_levels=this.config.serverConfig.max_levels;if(0==distanceOffset)maxLODWith=this.utils.getNiceLOD(this.line_.getLength(),max_levels);else{const domain=this.plot.updateScaleX.domain();pytreeLinestring="";for(const clipped of clippedLine)pytreeLinestring+=`{${clipped[0]},${clipped[1]}},`;pytreeLinestring=pytreeLinestring.substr(0,pytreeLinestring.length-1),maxLODWith=this.utils.getNiceLOD(domain[1]-domain[0],max_levels)}let lastLOD=!1;(0,src.Ltv)(lidarContainerElement.querySelector(".lod-info")).html(""),this.config.clientConfig.pointSum=0;let profileWidth=0;profileWidth=this.config.clientConfig.autoWidth?maxLODWith.width:this.config.serverConfig.width;const profileWidthTxt=i18next.Ay.t("Profile width: ");(0,src.Ltv)(lidarContainerElement.querySelector(".width-info")).html(`${profileWidthTxt} ${profileWidth}m`);for(let i=0;i<maxLODWith.maxLOD;i++)0==i?(this.queryPytree_(minLOD,this.config.serverConfig.initialLOD,i,pytreeLinestring,distanceOffset,lastLOD,profileWidth,resetPlot),i+=this.config.serverConfig.initialLOD-1):(i<maxLODWith.maxLOD-1||(lastLOD=!0),this.queryPytree_(minLOD+i,minLOD+i+1,i,pytreeLinestring,distanceOffset,lastLOD,profileWidth,!1))}queryPytree_(minLOD,maxLOD,iter,coordinates,distanceOffset,lastLOD,width,resetPlot){if(!this.config)throw new Error("Missing config");if(!this.config.serverConfig)throw new Error("Missing config.serverConfig");const lodInfo=(0,src.Ltv)(document.querySelector("#lidar-footer").shadowRoot.querySelector("#gmf-lidarprofile-container .lod-info"));if(this.config.serverConfig.debug){let html=lodInfo.html();html+=`${i18next.Ay.t("Loading LOD: ")} ${minLOD}-${maxLOD}..<br>`,lodInfo.html(html)}const pointCloudName=this.config.serverConfig.default_point_cloud,hurl=`${this.config.pytreeLidarprofileJsonUrl}/profile/get?minLOD=${minLOD}&maxLOD=${maxLOD}&width=${width}&coordinates=${coordinates}&pointCloud=${pointCloudName}&attributes=`;fetch(hurl,{method:"GET",headers:{"Content-Type":"text/plain; charset=x-user-defined"},responseType:"arraybuffer"}).then(resp=>resp.arrayBuffer()).then(data=>{if(!this.config)throw new Error("Missing config");if(!this.config.serverConfig)throw new Error("Missing config.serverConfig");if(this.config.serverConfig.debug){let html=lodInfo.html();const lodTxt=i18next.Ay.t("LOD: "),loadedTxt=i18next.Ay.t("loaded");html+=`${lodTxt} ${minLOD}-${maxLOD} ${loadedTxt}<br>`,lodInfo.html(html)}this.processBuffer_(data,iter,distanceOffset,lastLOD,resetPlot)}).catch(err=>{throw new Error(`Error on pytree query: ${err.message}`)})}processBuffer_(profile,iter,distanceOffset,lastLOD,resetPlot){if(!this.config)throw new Error("Missing config");if(!this.config.serverConfig)throw new Error("Missing config.serverConfig");if(!this.plot)throw new Error("Missing plot");if(!this.line_)throw new Error("Missing line");const lidarContainerElement=document.querySelector("#lidar-footer").shadowRoot.querySelector("#gmf-lidarprofile-container"),lidarError=(0,src.Ltv)(lidarContainerElement.querySelector(".lidar-error")),headerSize=new Int32Array(profile,0,4)[0],uInt8header=new Uint8Array(profile,4,headerSize);let strHeaderLocal="";for(const header of uInt8header)strHeaderLocal+=String.fromCharCode(header);try{JSON.parse(strHeaderLocal)}catch(e){if(!this.isPlotSetup_){const canvas=(0,src.Ltv)(lidarContainerElement.querySelector(".lidar-canvas")),canvasEl=canvas.node(),ctx=canvasEl.getContext("2d");if(null===ctx)throw new Error("Missing ctx");ctx.clearRect(0,0,canvasEl.getBoundingClientRect().width,canvasEl.getBoundingClientRect().height),canvas.selectAll("*").remove();const errorTxt=this.getHTMLError_();lidarError.style("visibility","visible"),lidarError.html(errorTxt)}return}lidarError.style("visibility","hidden");const jHeader=JSON.parse(strHeaderLocal);this.config.clientConfig.pointSum+=jHeader.points,this.config.clientConfig.pointSum>this.config.serverConfig.max_point_number&&console.warn("Number of points is higher than Pytree configuration max value !");const attr=jHeader.pointAttributes,attributes=[];for(const att of attr)null!=this.config.serverConfig.point_attributes[att]&&attributes.push(this.config.serverConfig.point_attributes[att]);const scale=jHeader.scale;if(jHeader.points<3)return;const points=this.getEmptyProfilePoints_(),bytesPerPoint=jHeader.bytesPerPoint,buffer=profile.slice(4+headerSize);for(let i=0;i<jHeader.points;i++){const view=new DataView(buffer,bytesPerPoint*i,bytesPerPoint);let aoffset=0;for(const attribute of attributes){if("POSITION_PROJECTED_PROFILE"==attribute.value){const dist=view.getUint32(aoffset,!0)*scale;points.distance.push(Math.round(100*(distanceOffset+dist))/100),this.profilePoints.distance.push(Math.round(100*(distanceOffset+dist))/100)}else if("CLASSIFICATION"==attribute.value){const classif=view.getUint8(aoffset);points.classification.push(classif),this.profilePoints.classification.push(classif)}else if("INTENSITY"==attribute.value){const intensity=view.getUint8(aoffset);points.intensity.push(intensity),this.profilePoints.intensity.push(intensity)}else if("COLOR_PACKED"==attribute.value){const r=view.getUint8(aoffset),g=view.getUint8(aoffset+1),b=view.getUint8(aoffset+2);points.color_packed.push([r,g,b]),this.profilePoints.color_packed.push([r,g,b])}else if("POSITION_CARTESIAN"==attribute.value){const lx=jHeader.boundingBox.lx;if("number"!=typeof lx)throw new Error("Wrong lx type");const ly=jHeader.boundingBox.ly;if("number"!=typeof ly)throw new Error("Wrong ly type");const lz=jHeader.boundingBox.lz;if("number"!=typeof lz)throw new Error("Wrong lz type");const x=view.getInt32(aoffset,!0)*scale+lx,y=view.getInt32(aoffset+4,!0)*scale+ly,z=view.getInt32(aoffset+8,!0)*scale+lz;points.coords.push([x,y]),points.altitude.push(z),this.profilePoints.altitude.push(z),this.profilePoints.coords.push([x,y])}aoffset+=attribute.bytes}}const rangeX=[0,this.line_.getLength()],rangeY=[this.utils.arrayMin(points.altitude),this.utils.arrayMax(points.altitude)];(0==iter&&resetPlot||!this.isPlotSetup_)&&(this.plot.setupPlot(rangeX,rangeY),this.isPlotSetup_=!0),this.plot.drawPoints(points)}getHTMLError_(){return`\n      <div class="lidarprofile-error">\n      <p class="bold">${i18next.Ay.t("LIDAR profile service error")}</p>\n      <p>${i18next.Ay.t("It might be offline")}</p>\n      <p>${i18next.Ay.t("Or did you attempt to draw a profile outside data extent?")}</p>\n      <p>${i18next.Ay.t("Or did you attempt to draw such a small profile that no point was returned?")}</p>\n    `}updateData(){this.debouncer()}updateData_(){if(!this.config)throw new Error("Missing config");if(!this.config.serverConfig)throw new Error("Missing config.serverConfig");if(!this.plot)throw new Error("Missing plot");if(!this.line_)throw new Error("Missing line");const domainX=this.plot.updateScaleX.domain();let map_resolution=this.map_?this.map_.getView().getResolution():0;map_resolution=map_resolution||0;const clip=this.utils.clipLineByMeasure(this.config,map_resolution,this.line_,domainX[0],domainX[1]),source=this.lidarBuffer.getSource();source.clear(),source.addFeature(clip.bufferGeom),this.lidarBuffer.setStyle(clip.bufferStyle);const span=domainX[1]-domainX[0],maxLODWidth=this.utils.getNiceLOD(span,this.config.serverConfig.max_levels);Math.abs(domainX[0]-this.plot.previousDomainX[0])<.2&&Math.abs(domainX[1]-this.plot.previousDomainX[1])<.2||maxLODWidth.maxLOD<=this.config.serverConfig.initialLOD?this.plot.drawPoints(this.profilePoints):this.getProfileByLOD(clip.clippedLine,clip.distanceOffset,!1,0),this.plot.previousDomainX=domainX}},Manager=gmfLidarprofileManager;function download(content,fileName,opt_fileType){const fileType=void 0===opt_fileType||function isSafari(){return navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")}()?"text/plain;charset=utf-8":opt_fileType,blob=new Blob([new Uint8Array([239,187,191]),content],{type:fileType});(0,FileSaver_min.saveAs)(blob,fileName)}const Csv=new class DownloadCsvService{constructor(){this.subscriptions=[],this.subscriptions.push(config.Ay.getConfig().subscribe({next:configuration=>{configuration&&(this.encoding_=configuration.ngeoCsvEncoding,this.extension_=configuration.ngeoCsvExtension,this.includeHeader_=configuration.ngeoCsvIncludeHeader,this.quote_=configuration.ngeoCsvQuote,this.separator_=configuration.ngeoCsvSeparator)}}))}generateCsv(data,columnDefs){if(0==data.length||0==columnDefs.length)return"";const translatedColumnHeaders=columnDefs.map(columnHeader=>0!==Object.keys(i18next.Ay.options).length?i18next.Ay.t(columnHeader.name):columnHeader.name),header=this.getRow_(translatedColumnHeaders),dataRows=data.map(values=>{const rowValues=columnDefs.map(columnHeader=>values[columnHeader.name]);return this.getRow_(rowValues)});return this.includeHeader_?header+dataRows.join(""):dataRows.join("")}getRow_(values){const matchAllQuotesRegex=new RegExp(this.quote_,"g"),doubleQuote=this.quote_+this.quote_;return`${values.map(value=>{if(null!=value){const strValue=`${value}`;return`${this.quote_}${strValue.replace(matchAllQuotesRegex,doubleQuote)}${this.quote_}`}return""}).join(this.separator_)}\n`}startDownload(data,columnDefs,fileName){download(this.generateCsv(data,columnDefs),fileName,`text/csv;charset=${this.encoding_}`)}};var Collection=__webpack_require__("./node_modules/ol/Collection.js"),Draw=__webpack_require__("./node_modules/ol/interaction/Draw.js"),events=__webpack_require__("./node_modules/ol/events.js");class FeatureOverlay{constructor(manager,index){this.manager_=manager,this.index_=index,this.listenerKeys_=[]}addFeature(feature){this.manager_.addFeature(feature,this.index_)}removeFeature(feature){this.manager_.removeFeature(feature,this.index_)}isEmpty(){return this.manager_.isEmpty(this.index_)}clear(){this.manager_.clear(this.index_)}setFeatures(features){this.clear(),this.listenerKeys_.forEach(events.JH),null!==features&&(features.forEach(feature=>{this.addFeature(feature)}),this.listenerKeys_.push((0,events.KT)(features,"add",evt=>this.handleFeatureAdd_(evt))),this.listenerKeys_.push((0,events.KT)(features,"remove",evt=>this.handleFeatureRemove_(evt))))}setStyle(style){this.manager_.setStyle(style,this.index_)}handleFeatureAdd_(evt){if(evt instanceof Collection.J){const feature=evt.element;this.addFeature(feature)}}handleFeatureRemove_(evt){if(evt instanceof Collection.J){const feature=evt.element;this.removeFeature(feature)}}}var util=__webpack_require__("./node_modules/ol/util.js"),obj=__webpack_require__("./node_modules/ol/obj.js");const map_FeatureOverlayMgr=new class FeatureOverlayMgr{constructor(){this.featureUidToGroupIndex_={},this.groups_=[],this.source_=new source_Vector.A({useSpatialIndex:!1}),this.layer_=new Vector.A({className:"canvas2d",source:this.source_,style:this.styleFunction_.bind(this),updateWhileAnimating:!0,updateWhileInteracting:!0})}isEmpty(groupIndex){return console.assert(groupIndex>=0),console.assert(groupIndex<this.groups_.length),(0,obj.p)(this.groups_[groupIndex].features)}addFeature(feature,groupIndex){console.assert(groupIndex>=0),console.assert(groupIndex<this.groups_.length);const featureUid=(0,util.v6)(feature).toString();this.featureUidToGroupIndex_[featureUid]=groupIndex,this.groups_[groupIndex].features[featureUid]=feature,this.source_.addFeature(feature)}removeFeature(feature,groupIndex){console.assert(groupIndex>=0),console.assert(groupIndex<this.groups_.length);const featureUid=(0,util.v6)(feature).toString();delete this.featureUidToGroupIndex_[featureUid],delete this.groups_[groupIndex].features[featureUid],this.source_.removeFeature(feature)}clear(groupIndex){console.assert(groupIndex>=0),console.assert(groupIndex<this.groups_.length);const group=this.groups_[groupIndex];for(const featureUid in group.features)this.removeFeature(group.features[featureUid],groupIndex);console.assert((0,obj.p)(group.features))}getLayer(){return this.layer_}getFeatureOverlay(){const groupIndex=this.groups_.length;return this.groups_.push({styleFunction:Style.d1,features:{}}),new FeatureOverlay(this,groupIndex)}init(map){this.layer_.setMap(map)}setStyle(style,groupIndex){console.assert(groupIndex>=0),console.assert(groupIndex<this.groups_.length),this.groups_[groupIndex].styleFunction=null===style?Style.d1:(0,Style.mC)(style)}styleFunction_(feature,resolution){const featureUid=(0,util.v6)(feature).toString();console.assert(featureUid in this.featureUidToGroupIndex_);const groupIndex=this.featureUidToGroupIndex_[featureUid];return this.groups_[groupIndex].styleFunction(feature,resolution)}};var Interaction=__webpack_require__("./node_modules/ol/interaction/Interaction.js");var BehaviorSubject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");const lidar_line=new class LineModel{constructor(){this.line_=new BehaviorSubject.t(null)}getLine(){return this.line_}setLine(line){this.line_.next(line)}};var store_map=__webpack_require__("./srcapi/store/map.ts"),panels=__webpack_require__("./srcapi/store/panels.ts");const gmfDrawLine=new class GmfDrawLine{constructor(){this.map_=null,this.line=null,this.features_=new Collection.A;const overlay=map_FeatureOverlayMgr.getFeatureOverlay();overlay.setFeatures(this.features_);const style_=new Style.Ay({stroke:new Stroke.A({color:"#ffcc33",width:2})});overlay.setStyle(style_),this.interaction=new Draw.Ay({type:"LineString",features:this.features_}),function interactionDecoration(interaction){console.assert(interaction instanceof Interaction.Ay),Object.defineProperty(interaction,"active",{get:()=>interaction.getActive(),set:val=>{interaction.setActive(val)}})}(this.interaction),this.subscriptions=[],this.subscriptions.push(lidar_line.getLine().subscribe({next:line=>{line?this.line=line:this.clear_()}})),this.subscriptions.push(store_map.A.getMap().subscribe({next:map=>{map&&(this.map_=map)}})),this.subscriptions.push(panels.A.getActiveToolPanel().subscribe({next:panel=>{this.active="lidar"===panel,this.active?(this.map_.addInteraction(this.interaction),this.initInteraction(),this.interaction.setActive(this.active)):(this.map_&&this.map_.removeInteraction(this.interaction),this.clear_())}}))}initInteraction(){this.interaction.on("drawstart",()=>{this.features_.clear()}),this.interaction.on("drawend",event=>{this.line=event.feature.getGeometry(),setTimeout(()=>{this.interaction.setActive(!1),lidar_line.setLine(this.line)},0)})}clear_(){this.features_.clear(),this.line=null}},DrawLineComponent=gmfDrawLine;var ToolPanelElement=__webpack_require__("./srcapi/elements/ToolPanelElement.ts"),__decorate=function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r};let GmfLidarPanel=class GmfLidarPanel extends ToolPanelElement.A{constructor(){super(...arguments),this.customCSS_="",this.profileConfig_=null,this.profile=null,this.ready=!1,this.active=!1,this.map=null,this.drawlineClass="",this.line=null,this.classifications=[],this.availablePointAttributes=[]}connectedCallback(){this.initSubscribe(),super.connectedCallback()}initSubscribe(){this.profile=Manager,this.profileConfig_=Config,this.subscriptions.push(lidar_line.getLine().subscribe({next:line=>{this.line=line,line?(this.drawlineClass="",this.update_()):this.clearAll()}})),this.subscriptions.push(store_map.A.getMap().subscribe({next:map=>{map&&(this.map=map,this.profile.init(this.profileConfig_,this.map))}})),this.subscriptions.push(panels.A.getActiveToolPanel().subscribe({next:panel=>{this.active="lidar"===panel,this.active?(this.drawlineClass="active",this.updateEventsListening_(this.active)):lidar_line.setLine(null)}}))}initConfig(configuration){configuration.gmfCustomCSS&&void 0!==configuration.gmfCustomCSS.lidarPanel&&(this.customCSS_=configuration.gmfCustomCSS.lidarPanel)}render(){return lit.qy`<style>${(0,lit.iz)(this.customCSS_)}</style>${this.getTitle(i18next.Ay.t("LIDAR profile"))}<div class="lidar-panel" gmf-drawprofileline><p><button class="btn btn-default ${this.drawlineClass}" @click="${()=>this.toggleDrawLine()}">${i18next.Ay.t("Draw LIDAR profile line")}</button></p><p>${DrawLineComponent.interaction.getActive()?lit.qy`<em class="text-muted small">${i18next.Ay.t("Draw a line on the map to display the corresponding LIDAR profile. Use double-click to finish the drawing.")}</em>`:lit.qy``}</p>${this.ready?lit.qy`${this.line?lit.qy`<div><button class="btn btn-default" @click="${()=>this.csvExport()}">${i18next.Ay.t("CSV export")}</button> <button class="btn btn-default" @click="${()=>this.pngExport()}">${i18next.Ay.t("PNG export")}</button> <button class="btn btn-default" @click="${()=>this.resetPlot()}" data-toggle="tooltip" data-placement="left" data-original-title="${i18next.Ay.t("Reset profile")}"><span class="fa-solid fa-arrows-rotate"></span></button></div><hr><button class="btn btn-default" @click="${()=>this.setMeasureActive()}" data-toggle="tooltip" data-placement="left" data-original-title="${i18next.Ay.t("Take measure on the graph")}">${i18next.Ay.t("Take measure")}</button> <button class="btn btn-default" @click="${()=>this.clearMeasure()}" data-toggle="tooltip" data-placement="left" data-original-title="${i18next.Ay.t("Clear measure")}"><span class="fa-solid fa-eraser"></span></button>`:""}<div><hr><p>${i18next.Ay.t("Material")}</p><select id="select-attributes" @change="${()=>this.selectPointAttribute()}">${Object.entries(this.availablePointAttributes).map(([key,value])=>lit.qy`<option value="${key}">${value.name}</option>`)}</select></div><hr><p>${i18next.Ay.t("Classes")}</p>${Object.entries(this.classifications).map(([key,value])=>lit.qy`<div><input type="checkbox" id="${value.name}" .checked="${!!value.visible}" @click="${()=>this.toggleVisibility(value,key)}"> <label for="${value.name}">${value.name}</label></div>`)}`:lit.qy`<p>${i18next.Ay.t("Initializing, please wait...")}</p>`}</div>`}toggleDrawLine(){this.drawlineClass="";const active=DrawLineComponent.interaction.getActive();active||(this.drawlineClass="active"),DrawLineComponent.interaction.setActive(!active)}toggleVisibility(classification,key){classification.visible=0===classification.visible?1:0,this.setClassification(classification,parseInt(key))}selectPointAttribute(){const selectedOption=this.renderRoot.querySelector("#select-attributes").value;Object.entries(this.availablePointAttributes).map(([key,value])=>{key===selectedOption&&this.setSelectedPointAttribute(value)})}initConfigAndActivateTool_(){this.profileConfig_.initProfileConfig().then(()=>{this.ready=!0,this.classifications=this.getClassification(),this.availablePointAttributes=this.getAvailablePointAttributes()}).catch(error=>{throw new Error(`Error getting profile config: ${error}`)})}updateEventsListening_(activate){!0===activate?this.ready||this.initConfigAndActivateTool_():this.clearAll()}update_(){if(this.profile.clearBuffer(),!this.profileConfig_.serverConfig)throw new Error("Missing profileConfig_.serverConfig");panels.A.openFooterPanel("lidar",{state:!0}),this.profile.setLine(this.line),this.profile.getProfileByLOD([],0,!0,this.profileConfig_.serverConfig.minLOD)}clearAll(){this.line=null,this.profile.setLine(null),this.profile.cartoHighlight.setPosition(void 0),this.profile.measure&&this.clearMeasure(),this.resetPlot()}setMeasureActive(){if(!this.profile.measure)throw new Error("Missing profile.measure");this.profile.measure.clearMeasure(),this.profile.measure.setMeasureActive()}clearMeasure(){if(!this.profile.measure)throw new Error("Missing profile.measure");this.profile.measure.clearMeasure()}resetPlot(){this.profile.clearBuffer(),this.line&&this.profile.getProfileByLOD([],0,!0,0)}getAvailablePointAttributes(){return this.profileConfig_.clientConfig.pointAttributes.availableOptions}setSelectedPointAttribute(selectedPointAttribute){this.profileConfig_.clientConfig.pointAttributes.selectedOption=selectedPointAttribute,this.profile.plot.changeStyle(selectedPointAttribute.value)}getClassification(){if(!this.profileConfig_.serverConfig)throw new Error("Missing profileConfig_.serverConfig");return this.profileConfig_.serverConfig.classification_colors}setClassification(classification,key){if(!this.profile.plot)throw new Error("Missing profile.plot");if(!this.profileConfig_.serverConfig)throw new Error("Missing profileConfig_.serverConfig");this.profileConfig_.serverConfig.classification_colors[key].visible=classification.visible,this.line&&this.profile.plot.setClassActive(this.profileConfig_.serverConfig.classification_colors,this.profileConfig_.serverConfig.default_attribute)}csvExport(){if(this.line){const points=this.profile.utils.getFlatPointsByDistance(this.profile.profilePoints)||[],csvData=this.profile.utils.getCSVData(points),headerColumns=Object.keys(points[0]).map(columnName=>({name:columnName}));Csv.startDownload(csvData,headerColumns,"LIDAR_profile.csv")}}pngExport(){this.line&&this.profile.utils.downloadProfileAsImageFile(this.profileConfig_.clientConfig)}};GmfLidarPanel.styles=[...ToolPanelElement.A.styles,lit.AH`.btn.btn-default{background-color:var(--map-tools-bg-color);border-color:var(--onhover-color);color:var(--map-tools-color)}.btn.btn-default.active{box-shadow:inset 0 .37rem .75rem var(--light-box-shadow-color)}.btn.btn-default.active,.btn.btn-default:hover{background-color:var(--onhover-color);border-color:var(--onhover-color-darken)}`],__decorate([(0,decorators.wk)()],GmfLidarPanel.prototype,"customCSS_",void 0),__decorate([(0,decorators.wk)()],GmfLidarPanel.prototype,"profileConfig_",void 0),__decorate([(0,decorators.wk)()],GmfLidarPanel.prototype,"profile",void 0),__decorate([(0,decorators.wk)()],GmfLidarPanel.prototype,"ready",void 0),__decorate([(0,decorators.wk)()],GmfLidarPanel.prototype,"active",void 0),__decorate([(0,decorators.wk)()],GmfLidarPanel.prototype,"map",void 0),__decorate([(0,decorators.wk)()],GmfLidarPanel.prototype,"drawlineClass",void 0),__decorate([(0,decorators.wk)()],GmfLidarPanel.prototype,"line",void 0),__decorate([(0,decorators.wk)()],GmfLidarPanel.prototype,"classifications",void 0),__decorate([(0,decorators.wk)()],GmfLidarPanel.prototype,"availablePointAttributes",void 0),GmfLidarPanel=__decorate([(0,decorators.EM)("gmf-lidar-panel")],GmfLidarPanel);var Map=__webpack_require__("./node_modules/ol/Map.js");const PanelElement_stories={title:"LIDAR panel",component:"gmf-lidar-panel"},Template=args=>{config.Ay.setConfig({pytreeLidarprofileJsonUrl:"https://sitn.ne.ch/pytree"}),panels.A.openToolPanel("lidar",{state:!0});const map=new Map.A({});return store_map.A.setMap(map),lidar_line.setLine(args.line),"<gmf-lidar-panel></gmf-lidar-panel>"},Empty=Template.bind({});Empty.args={line:null};const WithLine=Template.bind({});WithLine.args={line:new LineString.A([1,20])},Empty.parameters={...Empty.parameters,docs:{...Empty.parameters?.docs,source:{originalSource:"(args: Args) => {\n  // Set the config in the store\n  config.setConfig({\n    pytreeLidarprofileJsonUrl: 'https://sitn.ne.ch/pytree'\n  } as Configuration);\n\n  // Set the panel to always open lidar in the store\n  panels.openToolPanel('lidar', {\n    state: true\n  });\n\n  // Create and set a map in the store\n  const map = new olMap({});\n  storeMap.setMap(map);\n\n  // Set a line in the store\n  line.setLine(args.line);\n  return '<gmf-lidar-panel></gmf-lidar-panel>';\n}",...Empty.parameters?.docs?.source}}},WithLine.parameters={...WithLine.parameters,docs:{...WithLine.parameters?.docs,source:{originalSource:"(args: Args) => {\n  // Set the config in the store\n  config.setConfig({\n    pytreeLidarprofileJsonUrl: 'https://sitn.ne.ch/pytree'\n  } as Configuration);\n\n  // Set the panel to always open lidar in the store\n  panels.openToolPanel('lidar', {\n    state: true\n  });\n\n  // Create and set a map in the store\n  const map = new olMap({});\n  storeMap.setMap(map);\n\n  // Set a line in the store\n  line.setLine(args.line);\n  return '<gmf-lidar-panel></gmf-lidar-panel>';\n}",...WithLine.parameters?.docs?.source}}}},"./srcapi/store/map.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var rxjs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");const __WEBPACK_DEFAULT_EXPORT__=new class MapModel{constructor(){this.map_=new rxjs__WEBPACK_IMPORTED_MODULE_0__.t(null)}getMap(){return this.map_}setMap(map){this.map_.next(map)}}},"./srcapi/store/panels.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var rxjs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");const __WEBPACK_DEFAULT_EXPORT__=new class PanelsModel{constructor(){this.activeToolPanel_=new rxjs__WEBPACK_IMPORTED_MODULE_0__.t(null),this.activeFooterPanel_=new rxjs__WEBPACK_IMPORTED_MODULE_0__.t(null),this.filterActive_=new rxjs__WEBPACK_IMPORTED_MODULE_0__.t(!1),this.activeToolPanelState_=null,this.activeFooterPanelState_=null,this.autoCloseFooterPanel_=!1}getActiveToolPanel(){return this.activeToolPanel_}getActiveFooterPanel(){return this.activeFooterPanel_}getFilterActive(){return this.filterActive_}openToolPanel(panel,options){let state=(options=options||{}).state;if(void 0===state)state=this.activeToolPanelState_!=panel;else{if(state&&this.activeToolPanelState_==panel)return;if(!state&&this.activeToolPanelState_!=panel&&!0!==options.noError)throw new Error("You try to close a tool panel that's not open")}this.activeToolPanelState_=state?panel:null,this.activeToolPanel_.next(this.activeToolPanelState_),this.autoCloseFooterPanel_&&this.activeFooterPanelState_&&(this.activeFooterPanelState_=null,this.activeFooterPanel_.next(null))}openFooterPanel(panel,options){let state=(options=options||{}).state;if(void 0===state)state=this.activeFooterPanelState_!=panel;else{if(state&&this.activeFooterPanelState_==panel)return;if(!state&&this.activeFooterPanelState_!=panel&&!0!==options.noError)throw new Error("You try to close a footer panel that's not open")}this.activeFooterPanelState_=state?panel:null,this.activeFooterPanel_.next(this.activeFooterPanelState_),this.autoCloseFooterPanel_=!0===options.autoClose}closeToolPanel(){this.activeToolPanelState_&&this.openToolPanel(this.activeToolPanelState_,{state:!1})}closeFooterPanel(){this.activeFooterPanelState_&&this.openFooterPanel(this.activeFooterPanelState_,{state:!1})}setFilterActive(active){this.filterActive_.next(active)}}}}]);