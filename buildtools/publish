#!/bin/bash -ex

# The MIT License (MIT)
#
# Copyright (c) Camptocamp SA
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

GIT_REF=$(git rev-parse HEAD)

if [ -z "${GITHUB_REF}" ]; then
    GIT_BRANCH=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)
elif [[ "${GITHUB_REF}" =~ ^refs/heads/.* ]]; then
    GIT_BRANCH=$(echo "${GITHUB_REF}" | sed 's|^refs/heads/||g')
else
    echo "Build is not on a branch"
    exit
fi

if [[ ${GIT_BRANCH} =~ "/" ]]; then
    echo "Skipping deploy of external branch ${GIT_BRANCH}"
    exit
fi

cp -r api/dist api/dist_

# Cloning gh-pages into a local temporary directory
git fetch origin
git checkout -b gh-pages origin/gh-pages

git rm --ignore-unmatch -r --quiet --force ${GIT_BRANCH} || true

mkdir -p ${GIT_BRANCH}/examples
cp -r .build/examples-hosted/* ${GIT_BRANCH}/examples/
cp -r apidoc ${GIT_BRANCH}/
cp -r jsdoc/build ${GIT_BRANCH}/jsdoc
cp -r api/dist_ ${GIT_BRANCH}/api

# Rewrite root commit and force push
FIRST_COMMIT=$(git log --format='%H' | tail -1)
git reset --quiet --mixed $FIRST_COMMIT
git add ${GIT_BRANCH}
git commit --quiet --amend --message="Update GitHub pages"

remote_repo="https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/camptocamp/ngeo.git"
git push "${remote_repo}" gh-pages --force

git checkout ${GIT_REF}
